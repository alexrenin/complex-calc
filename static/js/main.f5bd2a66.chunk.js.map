{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["pretyBigNumb","num","toLocaleString","initValue","getCalcRes","yearPercent","yearNumber","monthIncome","startCount","periodNumPerYear","monthPercent","numberOfMonth","newRes","i","Math","round","pow","roundedRes","useStyles","makeStyles","theme","root","height","backgroundColor","palette","background","paper","btn","marginLeft","marginBottom","input","minWidth","headerText","textAlign","paddingTop","App","classes","inputYearPercent","useRef","inputStartCount","inputMonthIncome","inputYearNumber","useState","result","setResult","useEffect","res","monthPassIncome","className","CssBaseline","Container","maxWidth","Typography","component","List","ListItem","TextField","inputRef","label","type","defaultValue","Button","variant","color","onClick","parseInt","current","value","Divider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5bd2a66.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n/* help functions */\n\nfunction pretyBigNumb(num) {\n  const numbStr = num.toLocaleString()\n  return numbStr;\n}\n\nconst initValue = {\n  yearPercent: 10,\n  yearNumber: 1,\n  monthIncome: 0,\n  startCount: 100000,\n}\n\nfunction getCalcRes({\n  yearPercent = initValue.yearPercent,\n  yearNumber = initValue.yearNumber,\n  monthIncome = initValue.monthIncome,\n  startCount = initValue.startCount,\n} = {}) {\n  const periodNumPerYear = 12;\n  const monthPercent = 1 + (yearPercent / 100) / periodNumPerYear;\n  const numberOfMonth = yearNumber * periodNumPerYear;\n\n  const newRes = (() => {\n    if (monthIncome) {\n      let newRes = startCount;\n      for (let i = 1; i <= numberOfMonth; i++) {\n        newRes = Math.round(newRes * monthPercent * 100) / 100 + monthIncome;\n      }\n\n      return newRes;\n    }\n\n    return startCount * Math.pow(monthPercent, numberOfMonth);\n  })();\n\n  const roundedRes = Math.round(newRes);\n\n  return roundedRes;\n}\n\n/* Main component */\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n    backgroundColor: theme.palette.background.paper,\n  },\n  btn: {\n    marginLeft: 15,\n    marginBottom: 15,\n  },\n  input: {\n    minWidth: 250,\n  },\n  headerText: {\n    textAlign: 'center',\n    paddingTop: 20,\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const inputYearPercent = useRef();\n  const inputStartCount = useRef();\n  const inputMonthIncome = useRef();\n  const inputYearNumber = useRef();\n\n  const [result, setResult] = useState(0);\n\n  useEffect(() => {\n    const res = getCalcRes();\n\n    setResult(res);\n\n  }, [])\n\n  const monthPassIncome = Math.round(result * 0.04 / 12);\n\n  function handleDoCalc() {\n    const yearPercent = parseInt(inputYearPercent.current.value);\n    const yearNumber = parseInt(inputYearNumber.current.value);\n    const monthIncome = parseInt(inputMonthIncome.current.value);\n    const startCount = parseInt(inputStartCount.current.value);\n\n    const res = getCalcRes({\n      yearPercent,\n      yearNumber,\n      monthIncome,\n      startCount,\n    })\n\n    setResult(res);\n  }\n\n  return (\n    <div className=\"App\">\n        <CssBaseline />\n        <Container maxWidth=\"sm\" className={classes.root}>\n          <Typography component={'h1'} className={classes.headerText}>\n            {\"Калькулятор инвестиций\"}\n          </Typography>\n          <List>\n            <ListItem>\n              <TextField\n                className={classes.input}\n                inputRef={inputStartCount}\n                label=\"Первоначальная сумма\"\n                type=\"number\"\n                defaultValue={initValue.startCount}\n              />\n            </ListItem>\n            <ListItem>\n              <TextField\n                className={classes.input}\n                inputRef={inputYearPercent}\n                label=\"Ставка, % годовых\"\n                type=\"number\"\n                defaultValue={initValue.yearPercent}\n              />\n            </ListItem>\n            <ListItem>\n              <TextField\n                className={classes.input}\n                inputRef={inputYearNumber}\n                label=\"Количество лет\"\n                type=\"number\"\n                defaultValue={initValue.yearNumber}\n              />\n            </ListItem>\n            <ListItem>\n              <TextField\n                className={classes.input}\n                inputRef={inputMonthIncome}\n                label=\"Ежемесячное пополнение\"\n                type=\"number\"\n                defaultValue={initValue.monthIncome}\n              />\n            </ListItem>\n          </List>\n          <Button\n            className={classes.btn}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleDoCalc}\n          >\n            Расчитать\n          </Button>\n          <Divider />\n          <List>\n            <ListItem>\n              <Typography>\n                {`Сумма к получению: ${pretyBigNumb(result)}`}\n              </Typography>\n            </ListItem>\n          </List>\n          <List>\n            <ListItem>\n              <Typography>\n                {`4 % фонда / 12: ${pretyBigNumb(monthPassIncome)}`}\n              </Typography>\n            </ListItem>\n          </List>\n        </Container>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}